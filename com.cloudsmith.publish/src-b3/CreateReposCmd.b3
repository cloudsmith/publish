use com.cloudsmith.publish.RepositoryDefinition;
use org.eclipse.b3.build.BuildUnit;
use org.eclipse.b3.build.BuildSet;
use org.eclipse.b3.build.PathVector;
use java.lang.Throwable;

/** 
  This is the starting point for the current "resolve and run main action" available as a command from
  the UI. To be replaced by its own command. 
*/
function main(Map parameters) {
	with DefaultPublishing : { 
		try {	
			val allDefined = b3.allDefinedUnits().select(u | u instanceof RepositoryDefinition);
			if allDefined.size() != 1 then throw "File must contain one unit that 'is RepositoryDefinition'." endif;
			BuildSet producedResult = b3.resolveAndRunBuilder(
				allDefined[0], 
				"publish");
			PathVector basePath = (producedResult.getPathVectors()[0]);
			INFO("Repository created in: %s".format(basePath.getBasePath()));
		}
		catch Throwable e :
			ERROR("Publishing failed - see details.",e)
		endtry;
	};
}
  
/** This concern declares how publishing should be done for the different types of units. 
*/
concern DefaultPublishing 
	extends A_GEM_Needs_a_Ruby_Runtime,
		A_RubyRuntime_provides_Runtime, 
		A_PHPPackage_Needs_a_PHP_Runtime,
		A_PHPRuntime_provides_Runtime,
		Repositories_Requires_Everything {
	builder publish(RPM unit) {
		result : new RPMPublisher().write(unit);
	}
	builder publish(Native unit) {
		result : new NativePublisher().write(unit);
	}
	builder publish(GEM unit) {
		result : new GEMPublisher().write(unit);
	}
	builder publish(RubyRuntime unit) {
		result : new RubyPublisher().write(unit);
	}
	builder publish(PHPPackage unit) {
		result : new PHPPublisher().write(unit);
	}
	builder publish(Yum unit) {
		result : new YumPublisher().write(unit);
	}
	builder publish(Apt unit) {
		result : new AptPublisher().write(unit);
	}
	builder publish(Publishable unit) {
		input : [ select-required capability { name-space ~= _ ; name ~= _; }.publish() ];
		result : new Publisher().write(unit);
	}
	/** Builder that runs publish on everything that is required by the unit it operates on. */
	builder publish(RepositoryDefinition unit) {
		input : [ select-required capability { name-space ~= _ ; name ~= _; }.publish() ];
		result :  new RepositoryPublisher.write(unit, input);
	}
	/** Throws exception as a general unit is not publishable */
	builder publish(BuildUnit unit) {
		result: throw "The unit named ''%s'' is not of publishable type".format(unit.getName());
	}
}
« To reduce declaration in the Repository, it requires all other units by default.
»
concern Repositories_Requires_Everything {
	unit-context {
		select-units : is == RepositoryDefinition;
		modify-selected :  {
			select-required : {
				+ capability { name-space ~= _; name ~= _; };
			}  ;
		}; 
	}
}
/** This concern declares that all GEM units need a Ruby Runtime.
  Using this concern reduces the amount of declaration in each GEM.
*/
concern A_GEM_Needs_a_Ruby_Runtime {
	unit-context { 
	select-units: is == GEM; 
	modify-selected : { 
		requires : { 
			+capability { name-space : com.cloudsmith.stack.runtime; name : "ruby"; }; };
		};
	}
}

concern A_RubyRuntime_provides_Runtime {
	unit-context {
		select-units: is == RubyRuntime;
		modify-selected : {
			provides :  {
				+ capability { name-space : com.cloudsmith.stack.runtime; name : "ruby"; version: 1.0.0; };				
			};
		};
	}
}
/** This concern declares that all PHPPackage units need a PHP Runtime.
  Using this concern reduces the amount of declaration in each PHP Package.
*/
concern A_PHPPackage_Needs_a_PHP_Runtime {
	unit-context { 
	select-units: is == PHPPackage; 
	modify-selected : { 
		requires : { 
			+capability { name-space : com.cloudsmith.stack.runtime; name : "php"; }; };
		};
	}
}

concern A_PHPRuntime_provides_Runtime {
	unit-context {
		select-units: is == PHPRuntime;
		modify-selected : {
			provides :  {
				+ capability { name-space : com.cloudsmith.stack.runtime; name : "php"; version: 1.0.0; };				
			};
		};
	}
}