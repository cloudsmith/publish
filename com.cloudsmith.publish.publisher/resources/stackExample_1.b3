//
//  THIS TEMPLATE FILE PROVIDES INSTRUCTIONS AND SAMPLE CODE FOR AUTHORING A REPOSITORY.
//  YOU CAN EDIT IT AND 'SAVE' AS YOUR ACTUAL REPOSITORY, OR OPEN A NEW FILE AND WRITE
//  YOUR REPOSITORY FROM SCRATCH.
//  SEE 'HELP > SHOW README', OR 'HELP > HELP CONTENTS' FOR MORE DETAILS.
//

« The following is sample code for defining the repository. This is done simply by giving it a unique name 
  and version number; all the other units in the file will be automatically included. Note that there can be 
  only one repository definition unit (RepositoryDefinition) in a given file.
»
unit org.myorg.MyRepository version 1.0.0 is RepositoryDefinition {
}


« The following is sample code for an RPM in binary form. Note that:
 - RPMs (typically) follow the 'rpm:' versioning scheme
 - 'is RPM' declares that the unit represents a RPM
 - 'source' is a reference to the location of the RPM binary
»
unit "MySQL-server-community" version rpm:5.1.48-1.rhel5.i386 is RPM {
	source : "http://dev.mysql.com/get/Downloads/MySQL-5.1/MySQL-server-community-5.1.48-1.rhel5.i386.rpm/from/http://mirror.services.wisc.edu/mysql/";
}

« The following is sample code for a Linux package installed with YUM. 
  Note that the 'rpm:' version scheme is used.
»
unit aYumPackage version rpm:1.2.32 is YUM;

« The following is sample code for a Linux package installed with APT. 
  Note that the 'rpm:' version scheme is used.
»
unit anAptPackage version rpm:1.2.32 is APT;


« The following is sample code for a Gem. Note that a Gem typically follows the 'gem:' version 
  scheme (sometimes referred to as the 'gem rational version policy')
»
unit activemerchant version gem:1.5.1 is GEM;


« The following is sample code for a Ruby Runtime installed in C-source form. A 'RubyRuntime' differs 
  from an ordinary RPM in its support for additional configuration and plug-in installation options.
   
  Note that:
  - the requirement is on an exact version, (ranges are declared with [minVersion, maxVersion], where
    a '[' or ']' is inclusive, and '(' or ')' is exclusive at the respective end.
  - the sample includes a requirement on MySQL-devel-community.
  - a RubyRuntime where 'is CSource' is omitted is installed as an RPM
  
  To learn more about RubyRuntime options, review documentation found via the 'help' menu. 
»
unit "ruby-enterprise" version rpm:1.8.7-2010.02 is RubyRuntime, CSource {
	requires : unit { name : "MySQL-devel-community"; version : rpm:5.1.48-1.rhel5.i386; };
	source : "http://rubyforge.org/frs/download.php/71096/ruby-enterprise-1.8.7-2010.02.tar.gz";
}

« The following sample code appears because the 'ruby-enterprise' unit example above declares that 
  it requires MySQL-devel-community.
»
unit "MySQL-devel-community" version rpm:5.1.48-1.rhel5.i386 is RPM {
	source : "http://dev.mysql.com/get/Downloads/MySQL-5.1/MySQL-devel-community-5.1.48-1.rhel5.i386.rpm/from/http://mirror.services.wisc.edu/mysql/";
}


« The following is sample code for setting a default-property. 
  For example, you can declare that a Ruby runtime should be 
  installed with support for 'nginx', unless this property is explicitly overridden 
  in another unit.
»
default-properties {
	${com.cloudsmith.stack.runtime.ruby.webserver} = "nginx"; 
	} 


« The following is sample code for a native unit. In this case, it is installed from an SVN repository.
  The 'source' location specifies its location in SVN, as well as the location where the checked-out result 
  will be placed when the unit is ultimately being installed (path=).
   
  Note that:
     - the sample includes an additional unit (org.myorg.myComponent.configuration) that installs a custom installer
       for this unit.
       
  To learn more about fetching options, and native units, review documentation found via the 'help' menu.
»
unit org.myorg.myComponent version 1.0.0.r12345 is Native {
	source : "svn://org.myorg/svnroot/trunk/org.myorg.mycomponent?revision=12345&path=/opt/org.myorg.myComponent";
}

« The following is sample code for for a Native unit that creates an installation fragment for another unit. 
  This is used to separate an installer from the installable content. In this example, a special install script 
  is in a different SVN location than the installable content. Executing the script requires definition of a 
  Builder called 'publish' to produce the instructions to execute during installation. 
    
  Using Native components and builders can be quite complex. A wide range of installation and configuration 
  instructions are available (executing a script or program, copying files, unzipping, setting permissions, etc.) 
  and they can be invoked at different points during the installation process (when installing, configuring, 
  uninstalling, etc.).
    
  This sample shows one of the simplest usage scenarios possible. See 'help' for information on more
  advanced scenarios.
»
unit org.myorg.myComponent.configuration version 1.0.0.r12345 is Native {
	source : "svn://org.myorg/svnroot/trunk/org.myorg.mycomponent.configuration?revision=12345&path=/opt/org.myorg.myComponent.configuration";
	fragment-host : unit {
		name : "org.myorg.myComponent";
		version : 1.0.0.r12345; 
		};
		
	« This Builder will be executed when the repository is published. The result is
	  that the 'NativePublisher' will contain an instruction that is executed
	  'when installing'. The example instruction here runs a shell script in posix mode.
	»
	builder publish() {
		result : new NativePublisher() as p {
			whenInstalling : [p.exec("/bin/sh", "--posix", "/opt/org.myorg.myComponent.configuration/myScript.sh") ];
		}.write(unit);
	}
}

