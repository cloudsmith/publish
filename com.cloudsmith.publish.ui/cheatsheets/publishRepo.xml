<?xml version="1.0" encoding="UTF-8"?>
<compositeCheatsheet name="Creating and Publishing a Repository">
   <taskGroup kind="sequence" name="Detailed Steps" skip="false">
      <intro>
         <b>Introduction</b><br/>The steps in this cheat sheet shows how to:<br/>
• Create a new file<br/>
• Edit the content<br/>
• Adding (basic) definitions of GEM, Runtime, RPM and other types of components.<br/>
• Generating the repository<br/>
      </intro>
      <onCompletion>
         <b>Conclusion</b>
      </onCompletion>
      <taskGroup kind="choice" name="Create a new file..." skip="false">
         <intro>
            <b>Introduction</b>
         </intro>
         <onCompletion>
            <b>Conclusion</b>
         </onCompletion>
         <task kind="cheatsheet" name="...using the Publisher" skip="true">
            <intro>
               Create a new file from within the Publisher.
            </intro>
            <onCompletion>
               You now have a new file with a sample definition of a Repository and a selection of different types of content. Continue by editing the content.
            </onCompletion>
            <param name="path" value="createNewFilePublisher.xml">
            </param>
         </task>
         <task kind="cheatsheet" name="...using external commands" skip="true">
            <intro>
               Create a new file using external commands.
            </intro>
            <onCompletion>
               <b>Conclusion</b>
            </onCompletion>
            <param name="path" value="createNewFileExternal.xml">
            </param>
         </task>
      </taskGroup>
      <taskGroup kind="set" name="Edit the file" skip="false">
         <intro>
            <b>Introduction</b> Edit the created file to reflect the content of the repository. If file is created using the Publisher, it will contain sample definition - change them or simply delete all and start from scratch.
         </intro>
         <onCompletion>
            <b>Conclusion</b> You should now have a repository definition file containing one &quot;RepositoryDefinition&quot; and a unit definition per component that you want to include in the repository.
         </onCompletion>
         <task kind="cheatsheet" name="Add a Repository Definition" skip="false">
            <intro>
               <b>Introduction</b>
A repository definition file must have one (and only one) unit defined that represents the repository itself. This definition declares the name and version of the generated repository.
            </intro>
            <onCompletion>
               <b>Conclusion</b>There is no need to specify any content in the Repository Definition - all other units specified in the same file will automatically be included in the repository. <br/>
<b>Continue by...</b> adding units for the components you want included in the repository. See the various tasks in this group for guidance how to specify different types of components.
            </onCompletion>
            <param name="path" value="repositoryDefinition.xml">
            </param>
         </task>
         <task kind="cheatsheet" name="Add a GEM" skip="true">
            <intro>
               <b>Introduction</b>
GEM components defines Ruby GEMs that will be installed into a ruby runtime using the standard gems installation mechanism.
            </intro>
            <onCompletion>
               <b>Conclusion</b> A GEM definition is typically just a single line as the gems system is used to handle dependencies. You may however want to declare additional dependencies/requirements when the GEM itself is not specified to your needs. See the task &apos;Add a Requirement&apos;.
            </onCompletion>
            <param name="path" value="gemDefinition.xml">
            </param>
         </task>
         <task kind="cheatsheet" name="Add a RPM" skip="true">
            <intro>
               <b>Introduction</b>
RPM components defines native Linux RPM components that will be installed into a Linux runtime using the standard RPM installation mechanism.
            </intro>
            <onCompletion>
               <b>Conclusion</b> A RPM definition is typically quite small as the RPM system is used to handle dependencies. You may however want to declare additional dependencies/requirements when the RPM itself is not specified to your needs. See the task &apos;Add a Requirement&apos;.
            </onCompletion>
            <param name="path" value="rpmDefinition.xml">
            </param>
         </task>
         <task kind="cheatsheet" name="Add a native component built from C-source" skip="true">
            <intro>
               <b>Introduction</b>
A Native component can be installed from c-source. The target system&apos;s native way of compiling c-source is used.
            </intro>
            <onCompletion>
               <b>Conclusion</b> Dependency discovery is not possible for native components. Use the task &apos;Add a Requirement&apos; to specify the native component&apos;s dependencies.
            </onCompletion>
            <param name="path" value="nativeCSourceDefinition.xml">
            </param>
         </task>
         <task kind="cheatsheet" name="Add a Ruby Runtime" skip="true">
            <intro>
               <b>Introduction</b> A Ruby Runtime is a component type that can be built from source, or installed as a RPM. It supports additional ruby runtime specific configuration (e.g. web server support).
            </intro>
            <onCompletion>
               <b>Conclusion</b> The Ruby Runtime will typically require additional editing to specify the database to use, and integration with a web server. Continue by:<br/>
• Using the task &apos;Add a Requirement&apos; to specify the requirement on a database component.<br/>
• Using the task &apos;Specify Ruby Runtime Web Server Integration&apos;<br/>
            </onCompletion>
            <param name="path" value="rubyRuntimeDefinition.xml">
            </param>
         </task>
         <task kind="cheatsheet" name="Specify Ruby Runtime Web Server Integration" skip="true">
            <intro>
               <b>Introduction</b> A Ruby Runtime is integrated with a Web Server. The web server to use is controlled with a property. (Note that other components may also require this information).
            </intro>
            <onCompletion>
               <b>Conclusion</b> By having placed the default properties in the Repository Definition all components that require this information will see it. Override this property in included components if required.
            </onCompletion>
            <param name="path" value="rubyWebServerDefinition.xml">
            </param>
         </task>
         <task kind="cheatsheet" name="Add Requirement" skip="true">
            <intro>
               <b>Introduction</b> Requirement definitions are used to define the dependencies between components. A requirement can reference another unit, or a capability provided by some unit.
            </intro>
            <onCompletion>
               <b>Conclusion</b>
            </onCompletion>
            <param name="path" value="requirementDefinition.xml">
            </param>
         </task>
      </taskGroup>
   </taskGroup>
</compositeCheatsheet>
