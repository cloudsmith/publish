<project>
	<target name="create.product.zip" depends="-install.launcher.icon">
		<!-- create the product zip file -->
		<zip destfile="${sp:output}/${product.launcher.name}-${product.qualifier}${product.version.qualifier}.zip">
			<zipfileset dir="${product.install.directory}" dirmode="755" filemode="644" prefix="${product.launcher.name}">
				<filename name="${product.launcher.relative.pathname}" negate="true" />
			</zipfileset>
			<zipfileset dir="${product.install.directory}" filemode="755" prefix="${product.launcher.name}">
				<filename name="${product.launcher.relative.pathname}" />
			</zipfileset>
		</zip>

		<!-- cleanup the product install directory -->
		<delete dir="${product.install.directory}" />
	</target>

	<target name="-define.product.properties">
		<!-- set product target defaults -->
		<property name="product.arch" value="${osgi.arch}" />
		<property name="product.os" value="${osgi.os}" />
		<property name="product.ws" value="${osgi.ws}" />

		<property name="product.qualifier" value="${product.ws}.${product.os}.${product.arch}" />
		<property name="product.install.directory" location="${sp:output}/product-${product.qualifier}" />
		<property name="product.properties.filename" location="${product.install.directory}-properties.xml" />

		<!-- extract useful pieces of information from product file and load them to properties -->
		<xslt in="${sp:product.definition.file}" out="${product.properties.filename}" force="true" style="product-properties.xsl">
			<param name="os" expression="${product.os}" />
		</xslt>
		<xmlproperty file="${product.properties.filename}" />
		<delete file="${product.properties.filename}" />

		<!-- set product info defaults -->
		<property name="product.launcher.name" value="eclipse" />

		<!-- set additional product info defaults -->
		<property name="product.config.comment.addition" value="OSGi Framework configuration" />
		<condition property="product.config.comment" value="${product.name} ${product.config.comment.addition}" else="${product.config.comment.addition}">
			<isset property="product.name" />
		</condition>
		<condition property="product.version.qualifier" value="-${product.version}" else="">
			<isset property="product.version" />
		</condition>
	</target>

	<target name="-install.product" depends="-define.product.properties">
		<property name="repository.url" value="file:${sp:repository}" />

		<delete dir="${product.install.directory}" />
		<mkdir dir="${product.install.directory}" />

		<p2.director destination="${product.install.directory}" metadatarepository="${repository.url}" artifactrepository="${repository.url}" profile="Product" arch="${product.arch}" os="${product.os}" ws="${product.ws}" roaming="true">
			<iu id="${product.iu}" />
		</p2.director>

		<!-- delete the command line launcher created for windows targets -->
		<delete file="${product.install.directory}/eclipsec.exe" />

		<!-- this application can do without the P2 bits -->
		<delete dir="${product.install.directory}" includeemptydirs="true">
			<or>
				<filename name="p2/**" />
				<filename name="artifacts.xml" />
			</or>
		</delete>
		<!-- delete also P2 properties from the config.ini file -->
		<property name="config.ini" location="${product.install.directory}/configuration/config.ini" />
		<property name="config.ini.properties.prefix" value="config.ini.property." />
		<property file="${config.ini}" prefix="${config.ini.properties.prefix}" />
		<antcall target="-massage.config.ini" inheritall="false">
			<propertyset>
				<propertyref name="config.ini" />
				<propertyref name="config.ini.properties.prefix" />
				<propertyref name="product.config.comment" />
			</propertyset>
			<propertyset>
				<propertyref prefix="${config.ini.properties.prefix}" />
				<regexpmapper from="^((?:.+\.)?p2(?:\..+)?)$" to="filtered.\1" />
			</propertyset>
		</antcall>
	</target>

	<target name="-massage.config.ini">
		<property name="config.ini.filtered" location="${config.ini}.filtered" />
		<property name="config.ini.comment" location="${config.ini}.comment" />
		<echoproperties destfile="${config.ini.filtered}">
			<propertyset>
				<propertyref prefix="${config.ini.properties.prefix}" />
				<globmapper from="${config.ini.properties.prefix}*" to="*" />
			</propertyset>
		</echoproperties>
		<echo message="# ${product.config.comment}${line.separator}" file="${config.ini.comment}" />
		<copy file="${config.ini.filtered}" tofile="${config.ini}">
			<filterchain>
				<striplinecomments>
					<comment value="#" />
				</striplinecomments>
				<concatfilter prepend="${config.ini.comment}" />
			</filterchain>
		</copy>
		<dirname property="config.ini.directory" file="${config.ini}" />
		<basename property="config.ini.basename" file="${config.ini}" />
		<delete dir="${config.ini.directory}">
			<filename name="${config.ini.basename}.*" />
		</delete>
	</target>

	<target name="-define.launcher.properties">
		<pathconvert property="product.launcher.relative.pathname" setonempty="false">
			<first count="1">
				<fileset dir="${product.install.directory}">
					<and>
						<type type="file" />
						<filename name="**/${product.launcher.name}" />
						<present targetdir="${product.install.directory}">
							<mapper>
								<globmapper from="*" to="*.ini" />
							</mapper>
						</present>
					</and>
				</fileset>
			</first>
			<map from="${product.install.directory}/" to="" />
		</pathconvert>

		<!-- assume launcher is located at the installation root if we haven't found it -->
		<condition property="prouduct.launcher.location" value="${product.install.directory}">
			<not>
				<isset property="product.launcher.relative.pathname" />
			</not>
		</condition>
		<dirname property="prouduct.launcher.location" file="${product.install.directory}/${product.launcher.relative.pathname}" />
		<property name="product.launcher.relative.pathname" value="" />
	</target>

	<target name="-install.launcher.icon" depends="-install.product,-define.launcher.properties" if="product.launcher.icon">
		<eclipse.convertPath property="prouduct.launcher.icon.source" resourcepath="${product.launcher.icon}" />

		<condition property="prouduct.launcher.icon.relative.location" value="../Resources">
			<equals arg1="${product.os}" arg2="macosx" />
		</condition>
		<property name="prouduct.launcher.icon.relative.location" value="." />

		<property name="prouduct.launcher.icon.location" location="${prouduct.launcher.location}/${prouduct.launcher.icon.relative.location}" />

		<mkdir dir="${prouduct.launcher.icon.location}" />

		<copy todir="${prouduct.launcher.icon.location}" file="${prouduct.launcher.icon.source}" />
	</target>

	<target name="fix.executable.templates">
		<!--
		<!pathconvert property="ini.files" pathsep="${line.separator}">
			<fileset dir="${sp:equinox.executable.feature}">
				<filename name="**/MacOS/eclipse.ini" />
			</fileset>
		</pathconvert>
		<echo message="${ini.files}" />
		-->
		<delete dir="${sp:equinox.executable.feature}">
			<filename name="**/MacOS/eclipse.ini" />
		</delete>
	</target>
</project>
